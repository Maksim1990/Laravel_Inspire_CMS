version: 2
jobs:
  build:
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.1-jessie-node-browsers

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      # 
      # - image: redis:2.8.19

    steps:
      - checkout

      - run: sudo apt update && sudo apt install zlib1g-dev libsqlite3-dev
      - run: sudo docker-php-ext-install zip

      # Download and cache dependencies

      # composer cache
      - restore_cache:
          keys:
          # "composer.lock" can be used if it is committed to the repo
          - v1-dependencies-{{ checksum "composer.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run: composer install -n --prefer-dist --ignore-platform-reqs

      - save_cache:
          key: composer-v1-{{ checksum "composer.lock" }}
          paths:
            - vendor

      # node cache

      - restore_cache:
          keys:
            - node-v3-{{ checksum "package.json" }}
            - node-v3-
      - run: yarn install
      - save_cache:
          key: node-v3-{{ checksum "package.json" }}
          paths:
            - node_modules
            - ~/.yarn

      # prepare the database
      - run: touch storage/testing.sqlite

      - run: php artisan migrate --env=testing --database=sqlite_testing --force

      # Create testing environment file
      - run: cp .env.example .env.testing

      # Add encryption key for testing environment
      - run: php artisan key:generate --env=testing

      # run tests with phpunit or codecept
      - run: ./vendor/bin/phpunit
      #- run: ./vendor/bin/codecept build
      #- run: ./vendor/bin/codecept run --xml result.xml

      - run: mkdir ./tests/_output
      #- run: php artisan dusk
      - store_test_results:
          path: ./tests/_output
      - store_artifacts:
          path: ./tests/_output
  deploy:
         machine:
           enabled: true
         steps:
            - add_ssh_keys:
                       fingerprints:
                         - "5a:3e:5f:7f:35:1c:26:8b:71:57:92:bf:f4:9b:3e:b9"
            - run:
               name: Deploy Over SSH
               command: |
                 ssh -t $SSH_USER@$SSH_HOST "cd public_html/inspirecms && git pull origin master"
            - add_ssh_keys:
                       fingerprints:
                         - "0c:33:a8:8c:40:06:fa:ae:13:c8:63:a6:e7:52:a1:b0"
            - run:
               name: Deploy Over SSH to VPS server
               command: |
                 ssh -t $SSH_USER_VPS@$SSH_HOST_VPS "cd /var/www/html/vps/public_html/inspirecms/ && git pull origin master && composer install && php artisan module:migrate && php artisan migrate && npm install && npm run dev"
workflows:
  version: 2
    build-and-deploy:
      jobs:
        - build:
                  filters:
                    branches:
                      only: master
        - deploy:

            requires:
              - build
            filters:
              branches:
                only: master